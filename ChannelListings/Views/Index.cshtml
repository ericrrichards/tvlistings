@using System
@using System.Linq
@using System.Runtime.CompilerServices
@using tvListings
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<tvListings.GridScheduleResult>

@functions {

    private DateTime RoundToHalfHour(DateTime time) {
        if (time.Minute == 0 || time.Minute == 30) {
            return time.AddSeconds(-time.Second).AddMilliseconds(-time.Millisecond);
        }
        if (time.Minute < 30) {
            return time.AddMinutes(-time.Minute).AddSeconds(-time.Second).AddMilliseconds(-time.Millisecond);
        }
        return time.AddMinutes(-(time.Minute - 30)).AddSeconds(-time.Second).AddMilliseconds(-time.Millisecond);
    }

    private int RoundUp(int totalMinutes) {
        return totalMinutes + (30 - totalMinutes % 30);
    }
}
@{
    try {
        Layout = "Views/_Layout.cshtml";
        ViewBag.Title = "Index";
    } catch (Exception ex) {
        Console.WriteLine(ex.Message+"\n"+ex.StackTrace);
    }
}


<div class="row">
    <div class="col-xs-12">
        <h3>TV Listings for @Model.Name</h3>
        <table class="table listingsTable">
            <thead>
            <tr>
                <th style="width: 12.5%">Channel</th>
                @{
                    var startTime = RoundToHalfHour(DateTime.Now);
                    var endTime = startTime.AddMinutes(Model.Duration);
                    for (int i = 0; i < Model.Duration / 30 + 1; i++) {
                        var time = startTime.AddMinutes(30 * i);
                        <th style="width: 12.5%">@time.ToString("h:mm")</th>
                    }
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var channel in @Model.GridChannels) {
                try {
                    <tr>
                        <td>@channel.Channel @channel.DisplayName @channel.SourceId</td>
                        @{
                            var colCount = 0;
                            foreach (var airing in channel.Airings) {
                                var duration = airing.Duration;
                                if (airing.AiringTimeLocal < startTime) {
                                    duration = (int)Math.Ceiling((airing.AiringTimeLocal.AddMinutes(airing.Duration) - startTime).TotalMinutes);
                                }

                                var i = Math.Max(duration / 30, 1);
                                var lastColCount = colCount;
                                colCount += i;
                                var colSpan = (colCount <= 7 ? i : colCount - lastColCount);
                                if (airing.AiringTimeLocal <= endTime) {
                                    <td class="@((airing.Category ??"").Replace('\'', '_')) @((airing.Subcategory ??"").Replace(' ', '_'))" colspan="@colSpan">
                                        @airing.Title
                                        <br/>
                                        @airing.AiringTimeLocal.ToShortTimeString() - @airing.AiringTimeLocal.AddMinutes(airing.Duration).ToShortTimeString()
                                        <br/>
                                        @airing.EpisodeTitle
                                    </td>
                                }

                            }
                        }
                    </tr>
                } catch (Exception ex) {
                    Console.WriteLine(ex.Message + "\n"+ex.StackTrace);
                }
            }
            </tbody>


        </table>

    </div>
</div>
<script>
    $(function() {
        $('table').stickyTableHeaders();
    });
</script>
